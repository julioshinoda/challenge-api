// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	model "github.com/julioshinoda/challenge-api/internal/expression/model"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: expr
func (_m *Repository) Create(expr model.Expression) (model.Expression, error) {
	ret := _m.Called(expr)

	var r0 model.Expression
	if rf, ok := ret.Get(0).(func(model.Expression) model.Expression); ok {
		r0 = rf(expr)
	} else {
		r0 = ret.Get(0).(model.Expression)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Expression) error); ok {
		r1 = rf(expr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExpressionByID provides a mock function with given fields: ID
func (_m *Repository) DeleteExpressionByID(ID int64) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExpressionByID provides a mock function with given fields: ID
func (_m *Repository) GetExpressionByID(ID int64) (model.Expression, error) {
	ret := _m.Called(ID)

	var r0 model.Expression
	if rf, ok := ret.Get(0).(func(int64) model.Expression); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(model.Expression)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExpressions provides a mock function with given fields:
func (_m *Repository) GetExpressions() ([]model.Expression, error) {
	ret := _m.Called()

	var r0 []model.Expression
	if rf, ok := ret.Get(0).(func() []model.Expression); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Expression)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: expr
func (_m *Repository) Update(expr model.Expression) (model.Expression, error) {
	ret := _m.Called(expr)

	var r0 model.Expression
	if rf, ok := ret.Get(0).(func(model.Expression) model.Expression); ok {
		r0 = rf(expr)
	} else {
		r0 = ret.Get(0).(model.Expression)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Expression) error); ok {
		r1 = rf(expr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
